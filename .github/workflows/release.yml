name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.21
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Run tests
      run: go test -v ./...
      
    - name: Build binaries
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Building version: $VERSION"
        
        # Create dist directory
        mkdir -p dist
        
        # Build for multiple platforms
        PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
        
        for PLATFORM in $PLATFORMS; do
          GOOS=${PLATFORM%/*}
          GOARCH=${PLATFORM#*/}
          BINARY_NAME=ollama-lancache-${GOOS}-${GOARCH}
          
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          echo "Building for $GOOS/$GOARCH..."
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags "-X main.version=${VERSION} -X main.commit=${GITHUB_SHA::7}" \
            -o "dist/${BINARY_NAME}" .
        done
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes
          
          See [CHANGELOG.md](https://github.com/jjasghar/ollama-lancache/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### Quick Install (Linux/macOS)
          
          ```bash
          # Download and install
          curl -L https://github.com/jjasghar/ollama-lancache/releases/latest/download/ollama-lancache-linux-amd64 -o ollama-lancache
          chmod +x ollama-lancache
          sudo mv ollama-lancache /usr/local/bin/
          ```
          
          ### Windows
          
          Download `ollama-lancache-windows-amd64.exe` and place it in your PATH.
          
          ### Docker
          
          ```bash
          docker pull ghcr.io/jjasghar/ollama-lancache:${{ github.ref_name }}
          ```
          
          ## Usage
          
          Start the model distribution server:
          ```bash
          ollama-lancache serve --port 8080
          ```
          
          Install models on clients:
          ```bash
          # Windows
          powershell -c "irm http://your-server:8080/install.ps1 | iex"
          
          # Linux/macOS  
          curl -fsSL http://your-server:8080/install.sh | bash
          ```
        
    - name: Upload Release Assets
      run: |
        # Upload all binaries and checksums
        for file in dist/*; do
          echo "Uploading $file"
          gh release upload ${{ github.ref_name }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
